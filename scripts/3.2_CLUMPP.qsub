#!/bin/bash -login
#PBS -l walltime=00:10:00
#PBS -l nodes=1:ppn=1
#PBS -l feature=intel16
#PBS -l mem=2gb
##PBS -m a

#PBS -N notset
if [ "$PBS_JOBNAME" == "notset" ]
then
    echo "please set the job name"
    exit 1
fi

#Berkly Lab Checkpoint Restart script to run a job continuously
#Written by Dirk Colbry – edited by WRP 15/04/2016; AC 9/1/17


#Runs in STRUCTURE folder
cd ${PBS_O_WORKDIR}

#Job restarts itself every 3:50 hrs or 13800 seconds
export walltime="540"

export output="output.txt"

# Name if main checkpoint file
export checkpoint="checkfile.blcr"

### call your executable

# Name if main checkpoint file
export checkpoint="checkfile.blcr"

if [ "${PBS_ARRAYID}" = "" ]
then
	echo "Running for the first time"
	#SET UP JOB,
	#Runs once.  Include any job setup commands inside this if block before the cr_run command.

  ../../CLUMPP*/CLUMPP paramfile${PBS_ARRAYID} -k ${PBS_ARRAYID} for_clumpp_k${PBS_ARRAYID}.indfile
	export PID=$!
	export next=1
else
	echo "Restarting ${PBS_ARRAYID}"
	#Job running as a restart job
	cr_restart --no-restore-pid ${checkpoint} >> ${output} 2>&1 &
	export PID=$!
	export next=$(($PBS_ARRAYID+1))
fi

#function to run if the program times out
checkpoint_timeout() {
	echo "Timeout. Checkpointing Job"

	time cr_checkpoint --term ${PID}
	echo "**********"
	tail ${output}
	echo ""
	echo "**********"

	if [ ! "$?" == "0" ]
	then
		echo "Failed to checkpoint"
		exit 2
	fi

	echo "Queueing Next Job"
	chmod 644 context.${PID}
	mv context.${PID} ${checkpoint}
	qsub -t ${next} long_jerb_test.qsub

	exit 0
}

#set checkpoint timeout
(sleep ${walltime}; echo 'Timer Done'; checkpoint_timeout;) &
timeout=$!
echo "starting timer (${timeout}) for ${walltime} seconds"

echo "Waiting on $PID"
wait ${PID}
RET=$?

#Check to see if job checkpointed
if [ "${RET}" = "143" ] #Job terminated due to cr_checkpoint
then
	echo "Job seems to have been checkpointed, waiting for checkpoint to complete."
	wait ${timeout}
	qstat -f ${PBS_JOBID}
	exit 0
fi

## JOB completed

#Kill timeout timer
kill ${timeout}

#Output the job statistics
qstat -f ${PBS_JOBID}

#Email the user that the job has completed
qstat -f ${PBS_JOBID} | mail -s "JOB COMPLETE" $USER@msu.edu
echo "Job completed with exit status ${RET}"
exit 254
